buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id 'net.researchgate.release' version '2.6.0'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'io.codearte.nexus-staging' version '0.9.0'
    id 'org.dm.bundle' version '0.10.0'
}

ext {
    name = 'Camel Kafka ActivityStream Dataset'
    description = 'A Camel LDP implementation'
    vendor = 'pandorasystems'
    homepage = 'http://www.trellisldp.org'
    url = 'http://www.trellisldp.org/apidocs'
    license = 'Apache 2'
    inceptionYear = '2017'
}

configure(allprojects) { project ->
    apply plugin: 'maven'

    group = 'de.ubleizpig'


    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    ext {
        moduleName = 'de.ubleipzig.camel.serialization'
        camelVersion = '2.20.1'
        camelLdpVersion = '0.1.0'
        commonsRdfVersion = '0.5.0'
        jsonldVersion = "0.11.1"
        thriftVersion = "0.9.3"
        trellisApiVersion = "0.7.0-SNAPSHOT"

        /* Testing */
        junitVersion = '5.0.1'
        junitPlatformVersion = '1.0.1'
        jaxbVersion = '2.3.0'
        jacocoVersion = '0.7.9'
        jenaVersion = '3.5.0'
        activationVersion = '1.1.1'
        logbackVersion = '1.2.3'
        apiguardianVersion = '1.0.0'
        trellisIoJenaVersion = '0.2.1'

        camelVersionRange = '[2.16,3)'
        projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")
        defaultOsgiImports = 'org.osgi.service.blueprint;version="[1,2)",*'

        jacocoVersion = '0.8.0'
        checkstyleVersion = '8.8'
    }

    def dockerResourceDir = "${rootProject.buildDir}/resources/main/docker"
}

configure(subprojects) { subproject ->
    apply plugin: 'java-library'
    apply plugin: 'com.bmuschko.nexus'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.hierynomus.license'

    sourceCompatibility = 1.10
    targetCompatibility = 1.10

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs.add("-Xlint:unchecked")
            options.compilerArgs.add("-Xlint:deprecation")
        }
    }

    checkstyle {
        configFile = rootProject.file('buildtools/src/main/resources/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('buildtools/src/main/resources/checkstyle/')
        toolVersion = checkstyleVersion
    }

    license {
        include "**/*.java"
        header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    javadoc {
        doFirst {
            options.addBooleanOption('html5', true)
        }
        destinationDir = new File(projectDir, "docs/${version}")
        options {
            links "https://docs.oracle.com/javase/8/docs/api/"
        }
    }


    processResources {
        filesNotMatching(["**/*.sh", "**/*.jar", "**/*.tar", "**/*.xml"]) {
            expand(project.properties)
        }
    }
}

project("serializer") {
    apply plugin: 'application'

    description = 'A Camel Kafka service'
    mainClassName = 'de.ubleipzig.camel.serialization.KafkaEventConsumer'

    dependencies {
        implementation("ch.qos.logback:logback-classic:$logbackVersion")
        implementation("javax.activation:activation:$activationVersion")
        implementation("javax.xml.bind:jaxb-api:$jaxbVersion")
        implementation("org.apache.camel:camel-core:$camelVersion")
        implementation("org.trellisldp:camel-ldp:$camelLdpVersion")
        implementation("org.apache.camel:camel-kafka:$camelVersion")
        implementation("org.apache.camel:camel-jackson:$camelVersion")
        implementation("org.apache.camel:camel-http4:$camelVersion")
        implementation("org.apache.camel:camel-exec:$camelVersion")
        implementation("org.apache.commons:commons-rdf-api:$commonsRdfVersion")
        implementation("org.trellisldp:trellis-api:$trellisApiVersion")

        testImplementation("org.trellisldp:trellis-io-jena:$trellisIoJenaVersion")
        testImplementation("org.apache.camel:camel-kafka:$camelVersion")
        testImplementation("org.apache.camel:camel-jackson:$camelVersion")
        testImplementation("org.apache.camel:camel-http4:$camelVersion")
        testImplementation("org.apache.camel:camel-exec:$camelVersion")
        testImplementation("org.apiguardian:apiguardian-api:$apiguardianVersion")
        testImplementation("org.junit.platform:junit-platform-runner:$junitPlatformVersion")
        testImplementation("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
        testImplementation("org.apache.camel:camel-test:$camelVersion")
        testImplementation("javax.xml.bind:jaxb-api:$jaxbVersion")
        testImplementation("ch.qos.logback:logback-classic:$logbackVersion")
        testImplementation("org.apache.camel:camel-test-blueprint:$camelVersion")
        testImplementation("javax.activation:activation:$activationVersion")
    }
}


